from django.core.management.base import BaseCommand
from accounts.models import User, ClientProfile, ServiceOrganizationProfile
from machines.models import Machine
from maintenance.models import Maintenance
from complaints.models import Complaint
from directories.models import (
    TechniqueModel, EngineModel, TransmissionModel,
    DriveAxleModel, SteerAxleModel, MaintenanceType,
    FailureNode, RecoveryMethod, ServiceCompany, Directory
)

class Command(BaseCommand):
    help = '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'

    def handle(self, *args, **options):
        self.stdout.write('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n')
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.stdout.write('üè≠ –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:')
        self.stdout.write(f'  –ú–∞—à–∏–Ω—ã: {Machine.objects.count()}')
        self.stdout.write(f'  –¢–û: {Maintenance.objects.count()}')
        self.stdout.write(f'  –†–µ–∫–ª–∞–º–∞—Ü–∏–∏: {Complaint.objects.count()}')
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        self.stdout.write('\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:')
        total_users = User.objects.count()
        superusers = User.objects.filter(is_superuser=True).count()
        regular_users = total_users - superusers
        self.stdout.write(f'  –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}')
        self.stdout.write(f'  –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {superusers}')
        self.stdout.write(f'  –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {regular_users}')
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ —Ä–æ–ª—è–º
        clients = User.objects.filter(role='client').count()
        services = User.objects.filter(role='service').count()
        managers = User.objects.filter(role='manager').count()
        no_role = User.objects.filter(role__isnull=True).count()
        
        self.stdout.write(f'  –ö–ª–∏–µ–Ω—Ç—ã: {clients}')
        self.stdout.write(f'  –°–µ—Ä–≤–∏—Å–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {services}')
        self.stdout.write(f'  –ú–µ–Ω–µ–¥–∂–µ—Ä—ã: {managers}')
        self.stdout.write(f'  –ë–µ–∑ —Ä–æ–ª–∏: {no_role}')
        
        # –ü—Ä–æ—Ñ–∏–ª–∏
        self.stdout.write('\nüìã –ü—Ä–æ—Ñ–∏–ª–∏:')
        self.stdout.write(f'  –ü—Ä–æ—Ñ–∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: {ClientProfile.objects.count()}')
        self.stdout.write(f'  –ü—Ä–æ—Ñ–∏–ª–∏ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: {ServiceOrganizationProfile.objects.count()}')
        
        # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        self.stdout.write('\nüìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏:')
        self.stdout.write(f'  –ú–æ–¥–µ–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∏: {TechniqueModel.objects.count()}')
        self.stdout.write(f'  –ú–æ–¥–µ–ª–∏ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π: {EngineModel.objects.count()}')
        self.stdout.write(f'  –ú–æ–¥–µ–ª–∏ —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–π: {TransmissionModel.objects.count()}')
        self.stdout.write(f'  –ú–æ–¥–µ–ª–∏ –≤–µ–¥—É—â–∏—Ö –º–æ—Å—Ç–æ–≤: {DriveAxleModel.objects.count()}')
        self.stdout.write(f'  –ú–æ–¥–µ–ª–∏ —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –º–æ—Å—Ç–æ–≤: {SteerAxleModel.objects.count()}')
        self.stdout.write(f'  –¢–∏–ø—ã –¢–û: {MaintenanceType.objects.count()}')
        self.stdout.write(f'  –£–∑–ª—ã –æ—Ç–∫–∞–∑–æ–≤: {FailureNode.objects.count()}')
        self.stdout.write(f'  –°–ø–æ—Å–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {RecoveryMethod.objects.count()}')
        self.stdout.write(f'  –°–µ—Ä–≤–∏—Å–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏: {ServiceCompany.objects.count()}')
        self.stdout.write(f'  –û–±—â–∏–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫: {Directory.objects.count()}')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –≤ –º–∞—à–∏–Ω–∞—Ö
        self.stdout.write('\nüîó –°–≤—è–∑–∏ –≤ –º–∞—à–∏–Ω–∞—Ö:')
        machines_with_client = Machine.objects.filter(client__isnull=False).count()
        machines_with_service = Machine.objects.filter(service_organization__isnull=False).count()
        machines_without_client = Machine.objects.filter(client__isnull=True).count()
        machines_without_service = Machine.objects.filter(service_organization__isnull=True).count()
        
        self.stdout.write(f'  –ú–∞—à–∏–Ω—ã —Å –∫–ª–∏–µ–Ω—Ç–æ–º: {machines_with_client}')
        self.stdout.write(f'  –ú–∞—à–∏–Ω—ã —Å —Å–µ—Ä–≤–∏—Å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π: {machines_with_service}')
        self.stdout.write(f'  –ú–∞—à–∏–Ω—ã –ë–ï–ó –∫–ª–∏–µ–Ω—Ç–∞: {machines_without_client}')
        self.stdout.write(f'  –ú–∞—à–∏–Ω—ã –ë–ï–ó —Å–µ—Ä–≤–∏—Å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {machines_without_service}')
        
        if machines_without_client > 0 or machines_without_service > 0:
            self.stdout.write(
                self.style.WARNING(
                    '\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–∞—à–∏–Ω—ã –±–µ–∑ —Å–≤—è–∑–µ–π! –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.'
                )
            )
        else:
            self.stdout.write(
                self.style.SUCCESS(
                    '\n‚úÖ –í—Å–µ –º–∞—à–∏–Ω—ã –∏–º–µ—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–≤—è–∑–∏!'
                )
            )
