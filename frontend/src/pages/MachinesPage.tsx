"use client"

import type React from "react"
import { useState, useEffect } from "react"
import { Search, Filter, RotateCcw, Plus, Edit } from "lucide-react"
import { machineService, type Machine } from "../services/api"
import { usePermissions } from "../hooks/usePermissions"
import PermissionButton from "../components/PermissionButton"
import MachineForm from "../components/MachineForm"
import styles from "../styles/DataPage.module.css"
import { usePageTitle } from "../hooks/usePageTitle"

interface MachineFilters {
  search: string
  technique_model: string
  engine_model: string
  transmission_model: string
}

interface MachinesPageProps {
  userRole?: string
  user?: any
}

const MachinesPage: React.FC<MachinesPageProps> = ({ user }) => {
  usePageTitle("–ú–∞—à–∏–Ω—ã")
  const [machines, setMachines] = useState<Machine[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [filters, setFilters] = useState<MachineFilters>({
    search: "",
    technique_model: "",
    engine_model: "",
    transmission_model: "",
  })

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º
  const [isFormOpen, setIsFormOpen] = useState(false)
  const [editingMachine, setEditingMachine] = useState<Machine | undefined>(undefined)

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
  const permissions = usePermissions(user)

  const fetchMachines = async () => {
    setLoading(true)
    setError(null)
    try {
      const response = await machineService.getAll()

      const data = response.data

      const machinesArray = Array.isArray(data) ? data : data.results || []

      setMachines(machinesArray)
    } catch (err) {
      console.error("üîç fetchMachines - –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:", err)
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—à–∏–Ω–∞—Ö")
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    if (permissions.canViewMachines) {
      fetchMachines()
    } else {
      setLoading(false)
    }
  }, [permissions.canViewMachines])

  const handleFilterChange = (key: keyof MachineFilters, value: string) => {
    setFilters((prev) => ({ ...prev, [key]: value }))
  }

  const handleSearch = () => {
    console.log("–ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:", filters)
  }

  const handleReset = () => {
    setFilters({
      search: "",
      technique_model: "",
      engine_model: "",
      transmission_model: "",
    })
  }

  const handleCreateMachine = () => {
    setEditingMachine(undefined)
    setIsFormOpen(true)
  }

  const handleEditMachine = (machine: Machine) => {
    setEditingMachine(machine)
    setIsFormOpen(true)
  }

  const handleFormSuccess = () => {
    fetchMachines()
    setIsFormOpen(false)
    setEditingMachine(undefined)
  }

  const handleFormClose = () => {
    setIsFormOpen(false)
    setEditingMachine(undefined)
  }

  const filteredMachines = machines.filter((machine) => {
    const matchesSearch =
      !filters.search ||
      machine.serial_number.toLowerCase().includes(filters.search.toLowerCase()) ||
      machine.engine_serial.toLowerCase().includes(filters.search.toLowerCase())

    return matchesSearch
  })

  return (
    <div className={styles.container}>
      <div className={styles.content}>
        {/* Header */}
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div className={styles.headerIcon}>üöõ</div>
            <div>
              <h1 className={styles.title}>–ú–∞—à–∏–Ω—ã –°–ò–õ–ê–ù–¢</h1>
              <p className={styles.subtitle}>
                –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Ö–Ω–∏–∫–µ, –µ—ë –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö
              </p>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div style={{ marginLeft: "auto", display: "flex", gap: "10px" }}>
            <PermissionButton
              hasPermission={permissions.canCreateMachine}
              onClick={handleCreateMachine}
              variant="primary"
              tooltip="–¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –º–∞—à–∏–Ω—ã"
            >
              <Plus size={20} />
              –î–æ–±–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—É
            </PermissionButton>
          </div>
        </div>

        {/* Filters */}
        <div className={styles.filtersSection}>
          <h2 className={styles.filtersTitle}>
            <Filter size={24} />
            –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
          </h2>

          <div className={styles.filtersGrid}>
            <div className={styles.filterGroup}>
              <label className={styles.filterLabel}>–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É</label>
              <input
                type="text"
                className={styles.filterInput}
                placeholder="–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã –∏–ª–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—è..."
                value={filters.search}
                onChange={(e) => handleFilterChange("search", e.target.value)}
              />
            </div>

            <div className={styles.filterGroup}>
              <label className={styles.filterLabel}>–ú–æ–¥–µ–ª—å —Ç–µ—Ö–Ω–∏–∫–∏</label>
              <input
                type="text"
                className={styles.filterInput}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç–µ—Ö–Ω–∏–∫–∏..."
                value={filters.technique_model}
                onChange={(e) => handleFilterChange("technique_model", e.target.value)}
              />
            </div>

            <div className={styles.filterGroup}>
              <label className={styles.filterLabel}>–ú–æ–¥–µ–ª—å –¥–≤–∏–≥–∞—Ç–µ–ª—è</label>
              <input
                type="text"
                className={styles.filterInput}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–≤–∏–≥–∞—Ç–µ–ª—è..."
                value={filters.engine_model}
                onChange={(e) => handleFilterChange("engine_model", e.target.value)}
              />
            </div>

            <div className={styles.filterGroup}>
              <label className={styles.filterLabel}>–ú–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏</label>
              <input
                type="text"
                className={styles.filterInput}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏..."
                value={filters.transmission_model}
                onChange={(e) => handleFilterChange("transmission_model", e.target.value)}
              />
            </div>
          </div>

          <div className={styles.filterButtons}>
            <button className={`${styles.filterButton} ${styles.filterButtonPrimary}`} onClick={handleSearch}>
              <Search size={20} />
              –ù–∞–π—Ç–∏
            </button>
            <button className={`${styles.filterButton} ${styles.filterButtonSecondary}`} onClick={handleReset}>
              <RotateCcw size={20} />
              –°–±—Ä–æ—Å–∏—Ç—å
            </button>
          </div>
        </div>

        {/* Data Table */}
        <div className={styles.dataSection}>
          <div className={styles.dataHeader}>
            <div className={styles.dataTitle}>üìä –°–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω</div>
            <div className={styles.dataCount}>–ù–∞–π–¥–µ–Ω–æ: {filteredMachines.length}</div>
          </div>

          <div className={styles.tableContainer}>
            {loading ? (
              <div className={styles.loadingState}>
                <div className={styles.loadingSpinner}></div>
                <p className={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
              </div>
            ) : error ? (
              <div className={styles.errorState}>
                <div className={styles.errorIcon}>‚ö†Ô∏è</div>
                <h3 className={styles.errorTitle}>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                <p className={styles.errorText}>{error}</p>
              </div>
            ) : filteredMachines.length === 0 ? (
              <div className={styles.emptyState}>
                <div className={styles.emptyStateIcon}>üîç</div>
                <h3 className={styles.emptyStateTitle}>–ú–∞—à–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p className={styles.emptyStateText}>
                  {permissions.isClient
                    ? "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –º–∞—à–∏–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—à–∏–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É."
                    : "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"}
                </p>
              </div>
            ) : (
              <table className={styles.table}>
                <thead className={styles.tableHeader}>
                  <tr>
                    <th className={styles.tableHeaderCell}>–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä</th>
                    <th className={styles.tableHeaderCell}>–ú–æ–¥–µ–ª—å —Ç–µ—Ö–Ω–∏–∫–∏</th>
                    <th className={styles.tableHeaderCell}>–î–≤–∏–≥–∞—Ç–µ–ª—å</th>
                    <th className={styles.tableHeaderCell}>–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è</th>
                    <th className={styles.tableHeaderCell}>–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏</th>
                    {permissions.canEditMachine && (
                      <th className={styles.tableHeaderCell} style={{ width: "120px" }}>
                        –î–µ–π—Å—Ç–≤–∏—è
                      </th>
                    )}
                  </tr>
                </thead>
                <tbody>
                  {filteredMachines.map((machine) => (
                    <tr key={machine.id} className={styles.tableRow}>
                      <td
                        className={`${styles.tableCell} ${styles.tableCellBold}`}
                        onClick={() => (window.location.href = `/machines/${machine.id}`)}
                        style={{ cursor: "pointer" }}
                      >
                        {machine.serial_number}
                      </td>
                      <td
                        className={styles.tableCell}
                        onClick={() => (window.location.href = `/machines/${machine.id}`)}
                        style={{ cursor: "pointer" }}
                      >
                        {machine.technique_model_name || "‚Äî"}
                      </td>
                      <td
                        className={styles.tableCell}
                        onClick={() => (window.location.href = `/machines/${machine.id}`)}
                        style={{ cursor: "pointer" }}
                      >
                        <div>{machine.engine_model_name || "‚Äî"}</div>
                        <div className={styles.tableCellMuted}>‚Ññ {machine.engine_serial || "‚Äî"}</div>
                      </td>
                      <td
                        className={styles.tableCell}
                        onClick={() => (window.location.href = `/machines/${machine.id}`)}
                        style={{ cursor: "pointer" }}
                      >
                        <div>{machine.transmission_model_name || "‚Äî"}</div>
                        <div className={styles.tableCellMuted}>‚Ññ {machine.transmission_serial || "‚Äî"}</div>
                      </td>
                      <td
                        className={styles.tableCell}
                        onClick={() => (window.location.href = `/machines/${machine.id}`)}
                        style={{ cursor: "pointer" }}
                      >
                        {machine.shipment_date ? new Date(machine.shipment_date).toLocaleDateString("ru-RU") : "‚Äî"}
                      </td>
                      {permissions.canEditMachine && (
                        <td className={styles.tableCell}>
                          <PermissionButton
                            hasPermission={permissions.canEditMachine}
                            onClick={() => handleEditMachine(machine)}
                            variant="secondary"
                            size="small"
                            tooltip="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—à–∏–Ω—É"
                          >
                            <Edit size={16} />
                          </PermissionButton>
                        </td>
                      )}
                    </tr>
                  ))}
                </tbody>
              </table>
            )}
          </div>
        </div>
      </div>

      {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      <MachineForm
        isOpen={isFormOpen}
        onClose={handleFormClose}
        onSuccess={handleFormSuccess}
        machine={editingMachine}
        user={user}
      />
    </div>
  )
}

export default MachinesPage
