"use client"

import type React from "react"
import { useState, useEffect } from "react"
import { directoriesService, complaintService, machineService, type Complaint } from "../services/api"
import { usePermissions } from "../hooks/usePermissions"
import FormModal from "./FormModal"
import AccessDenied from "./AccessDenied"
import styles from "../styles/Modal.module.css"

interface ComplaintFormProps {
  isOpen: boolean
  onClose: () => void
  onSuccess: () => void
  complaint?: Complaint
  user?: any
}

const ComplaintForm: React.FC<ComplaintFormProps> = ({ isOpen, onClose, onSuccess, complaint, user }) => {
  const [formData, setFormData] = useState({
    machine: "",
    failure_date: "",
    operating_hours: "",
    failure_node: "",
    failure_description: "",
    recovery_method: "",
    used_parts: "",
    spare_parts: "",
    recovery_date: "",
    downtime: "",
    service_company: "",
  })

  const [directories, setDirectories] = useState({
    failureNodes: [],
    recoveryMethods: [],
    serviceCompanies: [],
  })
  const [machines, setMachines] = useState([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [directoriesLoading, setDirectoriesLoading] = useState(false)

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
  const permissions = usePermissions(user)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
  const hasPermission = complaint ? permissions.canEditComplaint : permissions.canCreateComplaint

  useEffect(() => {
    if (isOpen) {
      loadDirectories()
      loadMachines()
    }
  }, [isOpen])

  useEffect(() => {
    if (complaint) {
      setFormData({
        machine: complaint.machine?.toString() || "",
        failure_date: complaint.failure_date || "",
        operating_hours: complaint.operating_hours?.toString() || "",
        failure_node: complaint.failure_node?.id?.toString() || "",
        failure_description: complaint.failure_description || "",
        recovery_method: complaint.recovery_method?.id?.toString() || "",
        used_parts: complaint.used_parts || "",
        spare_parts: complaint.spare_parts || "",
        recovery_date: complaint.recovery_date || "",
        downtime: complaint.downtime?.toString() || "",
        service_company: complaint.service_company?.id?.toString() || "",
      })
    } else {
      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ä–µ–∫–ª–∞–º–∞—Ü–∏–∏
      setFormData({
        machine: "",
        failure_date: "",
        operating_hours: "",
        failure_node: "",
        failure_description: "",
        recovery_method: "",
        used_parts: "",
        spare_parts: "",
        recovery_date: "",
        downtime: "",
        service_company: "",
      })
    }
  }, [complaint])

  const loadDirectories = async () => {
    setDirectoriesLoading(true)
    try {
      console.log("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –¥–ª—è —Ä–µ–∫–ª–∞–º–∞—Ü–∏–π...")
      const response = await directoriesService.getAllDirectories()
      console.log("üîç –û—Ç–≤–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:", response)

      const data = response.data || response
      console.log("üîç –î–∞–Ω–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:", data)

      setDirectories({
        failureNodes: Array.isArray(data.failureNodes) ? data.failureNodes : [],
        recoveryMethods: Array.isArray(data.recoveryMethods) ? data.recoveryMethods : [],
        serviceCompanies: Array.isArray(data.serviceCompanies) ? data.serviceCompanies : [],
      })
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:", err)
      setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
      setDirectories({
        failureNodes: [],
        recoveryMethods: [],
        serviceCompanies: [],
      })
    } finally {
      setDirectoriesLoading(false)
    }
  }

  const loadMachines = async () => {
    try {
      console.log("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω...")
      const response = await machineService.getAll()
      const data = response.data
      const machinesArray = Array.isArray(data) ? data : data.results || []
      setMachines(machinesArray)
      console.log("üîç –ú–∞—à–∏–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", machinesArray.length)
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—à–∏–Ω:", err)
      setMachines([])
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!hasPermission) {
      setError("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
      return
    }

    setLoading(true)
    setError(null)

    try {
      console.log("üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã —Ä–µ–∫–ª–∞–º–∞—Ü–∏–∏:", formData)

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const submitData = {
        ...formData,
        machine: Number.parseInt(formData.machine),
        operating_hours: formData.operating_hours ? Number.parseInt(formData.operating_hours) : null,
        failure_node: Number.parseInt(formData.failure_node),
        recovery_method: Number.parseInt(formData.recovery_method),
        downtime: formData.downtime ? Number.parseInt(formData.downtime) : null,
        service_company: formData.service_company ? Number.parseInt(formData.service_company) : null,
      }

      if (complaint) {
        await complaintService.update(complaint.id, submitData)
      } else {
        await complaintService.create(submitData)
      }

      onSuccess()
      onClose()
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", err)
      if (err instanceof Error) {
        setError(err.message)
      } else {
        setError("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
      }
    } finally {
      setLoading(false)
    }
  }

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    })
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  if (!hasPermission) {
    return (
      <FormModal isOpen={isOpen} onClose={onClose} title="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞">
        <AccessDenied
          title={complaint ? "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" : "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ"}
          message={
            complaint ? "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º–∞—Ü–∏–π" : "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ä–µ–∫–ª–∞–º–∞—Ü–∏–π"
          }
          suggestion="–¢–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º–∞—Ü–∏–∏"
        />
      </FormModal>
    )
  }

  return (
    <FormModal isOpen={isOpen} onClose={onClose} title={complaint ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º–∞—Ü–∏—é" : "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–∞—Ü–∏—é"}>
      <form onSubmit={handleSubmit} className={styles.form}>
        {error && <div className={styles.error}>{error}</div>}

        {directoriesLoading && (
          <div style={{ padding: "10px", backgroundColor: "#fef3c7", borderRadius: "4px", marginBottom: "16px" }}>
            ‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...
          </div>
        )}

        <div className={styles.formRow}>
          <div className={styles.formGroup}>
            <label htmlFor="machine">–ú–∞—à–∏–Ω–∞ *</label>
            <select
              id="machine"
              name="machine"
              value={formData.machine}
              onChange={handleChange}
              required
              className={styles.select}
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É</option>
              {machines.map((machine) => (
                <option key={machine.id} value={machine.id}>
                  {machine.serial_number} ({machine.technique_model_name || "–ú–æ–¥–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞"})
                </option>
              ))}
            </select>
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="failure_date">–î–∞—Ç–∞ –æ—Ç–∫–∞–∑–∞ *</label>
            <input
              type="date"
              id="failure_date"
              name="failure_date"
              value={formData.failure_date}
              onChange={handleChange}
              required
              className={styles.input}
            />
          </div>
        </div>

        <div className={styles.formRow}>
          <div className={styles.formGroup}>
            <label htmlFor="operating_hours">–ù–∞—Ä–∞–±–æ—Ç–∫–∞, –º/—á–∞—Å</label>
            <input
              type="number"
              id="operating_hours"
              name="operating_hours"
              value={formData.operating_hours}
              onChange={handleChange}
              className={styles.input}
              min="0"
            />
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="failure_node">–£–∑–µ–ª –æ—Ç–∫–∞–∑–∞ *</label>
            <select
              id="failure_node"
              name="failure_node"
              value={formData.failure_node}
              onChange={handleChange}
              required
              className={styles.select}
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —É–∑–µ–ª –æ—Ç–∫–∞–∑–∞</option>
              {directories.failureNodes.map((node) => (
                <option key={node.id} value={node.id}>
                  {node.name}
                </option>
              ))}
            </select>
          </div>
        </div>

        <div className={styles.formGroup}>
          <label htmlFor="failure_description">–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–∞ *</label>
          <textarea
            id="failure_description"
            name="failure_description"
            value={formData.failure_description}
            onChange={handleChange}
            required
            rows={3}
            className={styles.textarea}
            placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –æ—Ç–∫–∞–∑–∞..."
          />
        </div>

        <div className={styles.formGroup}>
          <label htmlFor="recovery_method">–°–ø–æ—Å–æ–± –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è *</label>
          <select
            id="recovery_method"
            name="recovery_method"
            value={formData.recovery_method}
            onChange={handleChange}
            required
            className={styles.select}
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</option>
            {directories.recoveryMethods.map((method) => (
              <option key={method.id} value={method.id}>
                {method.name}
              </option>
            ))}
          </select>
        </div>

        <div className={styles.formGroup}>
          <label htmlFor="used_parts">–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∑–∞–ø–∞—Å–Ω—ã–µ —á–∞—Å—Ç–∏</label>
          <textarea
            id="used_parts"
            name="used_parts"
            value={formData.used_parts}
            onChange={handleChange}
            rows={2}
            className={styles.textarea}
            placeholder="–ü–µ—Ä–µ—á–µ–Ω—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∞—Å–Ω—ã—Ö —á–∞—Å—Ç–µ–π..."
          />
        </div>

        <div className={styles.formGroup}>
          <label htmlFor="spare_parts">–ó–∞–ø–∞—Å–Ω—ã–µ —á–∞—Å—Ç–∏</label>
          <textarea
            id="spare_parts"
            name="spare_parts"
            value={formData.spare_parts}
            onChange={handleChange}
            rows={2}
            className={styles.textarea}
            placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∞—Å–Ω—ã—Ö —á–∞—Å—Ç—è—Ö..."
          />
        </div>

        <div className={styles.formRow}>
          <div className={styles.formGroup}>
            <label htmlFor="recovery_date">–î–∞—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</label>
            <input
              type="date"
              id="recovery_date"
              name="recovery_date"
              value={formData.recovery_date}
              onChange={handleChange}
              className={styles.input}
            />
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="downtime">–í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è, –¥–Ω–∏</label>
            <input
              type="number"
              id="downtime"
              name="downtime"
              value={formData.downtime}
              onChange={handleChange}
              className={styles.input}
              min="0"
            />
          </div>
        </div>

        <div className={styles.formGroup}>
          <label htmlFor="service_company">–°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è</label>
          <select
            id="service_company"
            name="service_company"
            value={formData.service_company}
            onChange={handleChange}
            className={styles.select}
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é</option>
            {directories.serviceCompanies.map((company) => (
              <option key={company.id} value={company.id}>
                {company.name}
              </option>
            ))}
          </select>
        </div>

        <div className={styles.formActions}>
          <button type="button" onClick={onClose} className={styles.cancelButton}>
            –û—Ç–º–µ–Ω–∞
          </button>
          <button type="submit" disabled={loading || directoriesLoading} className={styles.submitButton}>
            {loading ? "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..." : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"}
          </button>
        </div>
      </form>
    </FormModal>
  )
}

export default ComplaintForm
