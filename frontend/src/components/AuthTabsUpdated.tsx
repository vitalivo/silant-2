"use client"

import type React from "react"
import { useState } from "react"
import { Truck, Wrench, AlertTriangle, User, Settings } from "lucide-react"
import MachinesPage from "../pages/MachinesPage"
import MaintenancePage from "../pages/MaintenancePage"
import ComplaintsPage from "../pages/ComplaintsPage"
import DirectoriesManager from "./DirectoriesManager"
import PermissionsTest from "./PermissionsTest"
import PermissionsDebug from "./PermissionsDebug"
import AccessDenied from "./AccessDenied"
import { usePermissions } from "../hooks/usePermissions"
import styles from "../styles/AuthTabs.module.css"

interface AuthTabsProps {
  user: any
  onLogout: () => void
}

const AuthTabsUpdated: React.FC<AuthTabsProps> = ({ user, onLogout }) => {
  const [activeTab, setActiveTab] = useState<
    "machines" | "maintenance" | "complaints" | "directories" | "test" | "debug"
  >("machines") // –ù–∞—á–∏–Ω–∞–µ–º —Å –º–∞—à–∏–Ω
  const [refreshKey, setRefreshKey] = useState(0)

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
  const permissions = usePermissions(user)

  const renderTabContent = () => {
    switch (activeTab) {
      case "machines":
        return <MachinesPage key={`machines-${refreshKey}`} userRole={getUserRole()} />
      case "maintenance":
        return permissions.canViewMaintenance ? (
          <MaintenancePage key={`maintenance-${refreshKey}`} userRole={getUserRole()} user={user} />
        ) : (
          <AccessDenied
            title="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¢–û"
            message="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏"
            suggestion="–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞"
          />
        )
      case "complaints":
        return permissions.canViewComplaints ? (
          <ComplaintsPage key={`complaints-${refreshKey}`} userRole={getUserRole()} />
        ) : (
          <AccessDenied
            title="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∫–ª–∞–º–∞—Ü–∏—è–º"
            message="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∫–ª–∞–º–∞—Ü–∏—è—Ö"
            suggestion="–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞"
          />
        )
      case "directories":
        return permissions.canManageDirectories ? (
          <DirectoriesManager key={`directories-${refreshKey}`} />
        ) : (
          <AccessDenied
            title="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º"
            message="–¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏"
            suggestion="–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ä–æ–ª—å—é '–ú–µ–Ω–µ–¥–∂–µ—Ä'"
          />
        )
      case "test":
        return <PermissionsTest user={user} />
      case "debug":
        return <PermissionsDebug user={user} />
      default:
        return <MachinesPage key={`machines-${refreshKey}`} userRole={getUserRole()} />
    }
  }

  const getUserRole = () => {
    if (permissions.isManager) return "manager"
    if (permissions.isClient) return "client"
    if (permissions.isServiceCompany) return "service"
    return "user"
  }

  const getRoleDisplayName = () => {
    if (permissions.isManager) return "–ú–µ–Ω–µ–¥–∂–µ—Ä"
    if (permissions.isClient) return "–ö–ª–∏–µ–Ω—Ç"
    if (permissions.isServiceCompany) return "–°–µ—Ä–≤–∏—Å–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"
    return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
  }

  const getRoleColor = () => {
    if (permissions.isManager) return "#059669" // green
    if (permissions.isClient) return "#0284c7" // blue
    if (permissions.isServiceCompany) return "#7c3aed" // purple
    return "#6b7280" // gray
  }

  return (
    <div className={styles.container}>
      {/* User Info Header */}
      <div className={styles.userHeader}>
        <div className={styles.userInfo}>
          <div className={styles.userIcon}>
            <User size={24} />
          </div>
          <div>
            <h3 className={styles.userName}>
              {user.first_name && user.last_name ? `${user.first_name} ${user.last_name}` : user.username}
            </h3>
            <p className={styles.userRole} style={{ color: getRoleColor() }}>
              {getRoleDisplayName()}
            </p>
            {!permissions.isManager && (
              <p className={styles.userLimitation}>
                {permissions.isClient && "–î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –≤–∞—à–∏—Ö –º–∞—à–∏–Ω"}
                {permissions.isServiceCompany && "–î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –æ–±—Å–ª—É–∂–∏–≤–∞–µ–º—ã—Ö –º–∞—à–∏–Ω"}
              </p>
            )}
          </div>
        </div>
      </div>

      {/* Tabs */}
      <div className={styles.tabsContainer}>
        <div className={styles.tabsList}>
          <button
            className={`${styles.tab} ${activeTab === "machines" ? styles.tabActive : ""}`}
            onClick={() => setActiveTab("machines")}
          >
            <Truck size={20} />
            <span>–ú–∞—à–∏–Ω—ã</span>
          </button>

          {permissions.canViewMaintenance && (
            <button
              className={`${styles.tab} ${activeTab === "maintenance" ? styles.tabActive : ""}`}
              onClick={() => setActiveTab("maintenance")}
            >
              <Wrench size={20} />
              <span>–¢–û</span>
            </button>
          )}

          {permissions.canViewComplaints && (
            <button
              className={`${styles.tab} ${activeTab === "complaints" ? styles.tabActive : ""}`}
              onClick={() => setActiveTab("complaints")}
            >
              <AlertTriangle size={20} />
              <span>–†–µ–∫–ª–∞–º–∞—Ü–∏–∏</span>
            </button>
          )}

          {permissions.canManageDirectories && (
            <button
              className={`${styles.tab} ${activeTab === "directories" ? styles.tabActive : ""}`}
              onClick={() => setActiveTab("directories")}
            >
              <Settings size={16} />
              <span>–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏</span>
            </button>
          )}

          {/* –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ development */}
          {
            <>
              <button
                className={`${styles.tab} ${activeTab === "test" ? styles.tabActive : ""}`}
                onClick={() => setActiveTab("test")}
                style={{
                  backgroundColor: "#fef3c7",
                  borderColor: "#f59e0b",
                  opacity: 0.7,
                  fontSize: "12px",
                }}
              >
                üß™ <span>–¢–µ—Å—Ç (–≤—Ä–µ–º–µ–Ω–Ω–æ)</span>
              </button>

              <button
                className={`${styles.tab} ${activeTab === "debug" ? styles.tabActive : ""}`}
                onClick={() => setActiveTab("debug")}
                style={{
                  backgroundColor: "#fef3c7",
                  borderColor: "#f59e0b",
                  opacity: 0.7,
                  fontSize: "12px",
                }}
              >
                üêõ <span>–û—Ç–ª–∞–¥–∫–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ)</span>
              </button>
            </>
          }
        </div>
      </div>

      {/* Tab Content */}
      <div className={styles.tabContent}>{renderTabContent()}</div>
    </div>
  )
}

export default AuthTabsUpdated
