"use client"

import type React from "react"
import { useState, useEffect } from "react"
import { directoriesService, machineService, type Machine } from "../services/api"
import { usePermissions } from "../hooks/usePermissions"
import FormModal from "./FormModal"
import AccessDenied from "./AccessDenied"
import styles from "../styles/Modal.module.css"

interface MachineFormProps {
  isOpen: boolean
  onClose: () => void
  onSuccess: () => void
  machine?: Machine
  user?: any
}

const MachineForm: React.FC<MachineFormProps> = ({ isOpen, onClose, onSuccess, machine, user }) => {
  const [formData, setFormData] = useState({
    serial_number: "",
    technique_model: "",
    engine_model: "",
    engine_serial: "",
    transmission_model: "",
    transmission_serial: "",
    drive_axle_model: "",
    drive_axle_serial: "",
    steer_axle_model: "",
    steer_axle_serial: "",
    supply_contract: "",
    shipment_date: "",
    consignee: "",
    delivery_address: "",
    equipment: "",
    client_name: "",
    service_company_name: "",
  })

  const [directories, setDirectories] = useState({
    techniqueModels: [],
    engineModels: [],
    transmissionModels: [],
    driveAxleModels: [],
    steerAxleModels: [],
    maintenanceTypes: [],
    failureNodes: [],
    recoveryMethods: [],
  })
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [directoriesLoading, setDirectoriesLoading] = useState(false)

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
  const permissions = usePermissions(user)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
  const hasPermission = machine ? permissions.canEditMachine : permissions.canCreateMachine

  useEffect(() => {
    if (isOpen) {
      loadDirectories()
    }
  }, [isOpen])

  useEffect(() => {
    if (machine) {
      setFormData({
        serial_number: machine.serial_number || "",
        technique_model: machine.technique_model?.id?.toString() || "",
        engine_model: machine.engine_model?.id?.toString() || "",
        engine_serial: machine.engine_serial || "",
        transmission_model: machine.transmission_model?.id?.toString() || "",
        transmission_serial: machine.transmission_serial || "",
        drive_axle_model: machine.drive_axle_model?.id?.toString() || "",
        drive_axle_serial: machine.drive_axle_serial || "",
        steer_axle_model: machine.steer_axle_model?.id?.toString() || "",
        steer_axle_serial: machine.steer_axle_serial || "",
        supply_contract: machine.supply_contract || "",
        shipment_date: machine.shipment_date || "",
        consignee: machine.consignee || "",
        delivery_address: machine.delivery_address || "",
        equipment: machine.equipment || "",
        client_name: machine.client_name || "",
        service_company_name: machine.service_organization_name || "",
      })
    } else {
      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –º–∞—à–∏–Ω—ã
      setFormData({
        serial_number: "",
        technique_model: "",
        engine_model: "",
        engine_serial: "",
        transmission_model: "",
        transmission_serial: "",
        drive_axle_model: "",
        drive_axle_serial: "",
        steer_axle_model: "",
        steer_axle_serial: "",
        supply_contract: "",
        shipment_date: "",
        consignee: "",
        delivery_address: "",
        equipment: "",
        client_name: "",
        service_company_name: "",
      })
    }
  }, [machine])

  const loadDirectories = async () => {
    setDirectoriesLoading(true)
    try {
      console.log("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏...")
      const response = await directoriesService.getAllDirectories()
      console.log("üîç –û—Ç–≤–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:", response)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
      const data = response.data || response
      console.log("üîç –î–∞–Ω–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:", data)

      setDirectories({
        techniqueModels: Array.isArray(data.techniqueModels) ? data.techniqueModels : [],
        engineModels: Array.isArray(data.engineModels) ? data.engineModels : [],
        transmissionModels: Array.isArray(data.transmissionModels) ? data.transmissionModels : [],
        driveAxleModels: Array.isArray(data.driveAxleModels) ? data.driveAxleModels : [],
        steerAxleModels: Array.isArray(data.steerAxleModels) ? data.steerAxleModels : [],
        maintenanceTypes: Array.isArray(data.maintenanceTypes) ? data.maintenanceTypes : [],
        failureNodes: Array.isArray(data.failureNodes) ? data.failureNodes : [],
        recoveryMethods: Array.isArray(data.recoveryMethods) ? data.recoveryMethods : [],
      })
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:", err)
      setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã, —á—Ç–æ–±—ã —Ñ–æ—Ä–º–∞ –Ω–µ –ø–∞–¥–∞–ª–∞
      setDirectories({
        techniqueModels: [],
        engineModels: [],
        transmissionModels: [],
        driveAxleModels: [],
        steerAxleModels: [],
        maintenanceTypes: [],
        failureNodes: [],
        recoveryMethods: [],
      })
    } finally {
      setDirectoriesLoading(false)
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!hasPermission) {
      setError("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
      return
    }

    setLoading(true)
    setError(null)

    try {
      console.log("üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:", formData)

      if (machine) {
        await machineService.update(machine.id, formData)
      } else {
        await machineService.create(formData)
      }

      onSuccess()
      onClose()
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", err)
      if (err instanceof Error) {
        setError(err.message)
      } else {
        setError("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
      }
    } finally {
      setLoading(false)
    }
  }

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    })
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  if (!hasPermission) {
    return (
      <FormModal isOpen={isOpen} onClose={onClose} title="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞">
        <AccessDenied
          title={machine ? "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" : "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ"}
          message={machine ? "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—à–∏–Ω" : "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –º–∞—à–∏–Ω"}
          suggestion="–¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—à–∏–Ω—ã"
        />
      </FormModal>
    )
  }

  return (
    <FormModal isOpen={isOpen} onClose={onClose} title={machine ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—à–∏–Ω—É" : "–î–æ–±–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—É"}>
      <form onSubmit={handleSubmit} className={styles.form}>
        {error && <div className={styles.error}>{error}</div>}

        {directoriesLoading && (
          <div style={{ padding: "10px", backgroundColor: "#fef3c7", borderRadius: "4px", marginBottom: "16px" }}>
            ‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...
          </div>
        )}

        <div className={styles.formGroup}>
          <label htmlFor="serial_number">–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã *</label>
          <input
            type="text"
            id="serial_number"
            name="serial_number"
            value={formData.serial_number}
            onChange={handleChange}
            required
            className={styles.input}
          />
        </div>

        <div className={styles.formRow}>
          <div className={styles.formGroup}>
            <label htmlFor="technique_model">–ú–æ–¥–µ–ª—å —Ç–µ—Ö–Ω–∏–∫–∏ *</label>
            <select
              id="technique_model"
              name="technique_model"
              value={formData.technique_model}
              onChange={handleChange}
              required
              className={styles.select}
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç–µ—Ö–Ω–∏–∫–∏</option>
              {directories.techniqueModels.map((model) => (
                <option key={model.id} value={model.id}>
                  {model.name}
                </option>
              ))}
            </select>
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="shipment_date">–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ —Å –∑–∞–≤–æ–¥–∞ *</label>
            <input
              type="date"
              id="shipment_date"
              name="shipment_date"
              value={formData.shipment_date}
              onChange={handleChange}
              required
              className={styles.input}
            />
          </div>
        </div>

        <div className={styles.formRow}>
          <div className={styles.formGroup}>
            <label htmlFor="engine_model">–ú–æ–¥–µ–ª—å –¥–≤–∏–≥–∞—Ç–µ–ª—è *</label>
            <select
              id="engine_model"
              name="engine_model"
              value={formData.engine_model}
              onChange={handleChange}
              required
              className={styles.select}
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–≤–∏–≥–∞—Ç–µ–ª—è</option>
              {directories.engineModels.map((model) => (
                <option key={model.id} value={model.id}>
                  {model.name}
                </option>
              ))}
            </select>
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="engine_serial">–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –¥–≤–∏–≥–∞—Ç–µ–ª—è *</label>
            <input
              type="text"
              id="engine_serial"
              name="engine_serial"
              value={formData.engine_serial}
              onChange={handleChange}
              required
              className={styles.input}
            />
          </div>
        </div>

        <div className={styles.formRow}>
          <div className={styles.formGroup}>
            <label htmlFor="transmission_model">–ú–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏ *</label>
            <select
              id="transmission_model"
              name="transmission_model"
              value={formData.transmission_model}
              onChange={handleChange}
              required
              className={styles.select}
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏</option>
              {directories.transmissionModels.map((model) => (
                <option key={model.id} value={model.id}>
                  {model.name}
                </option>
              ))}
            </select>
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="transmission_serial">–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏ *</label>
            <input
              type="text"
              id="transmission_serial"
              name="transmission_serial"
              value={formData.transmission_serial}
              onChange={handleChange}
              required
              className={styles.input}
            />
          </div>
        </div>

        <div className={styles.formRow}>
          <div className={styles.formGroup}>
            <label htmlFor="drive_axle_model">–ú–æ–¥–µ–ª—å –≤–µ–¥—É—â–µ–≥–æ –º–æ—Å—Ç–∞ *</label>
            <select
              id="drive_axle_model"
              name="drive_axle_model"
              value={formData.drive_axle_model}
              onChange={handleChange}
              required
              className={styles.select}
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≤–µ–¥—É—â–µ–≥–æ –º–æ—Å—Ç–∞</option>
              {directories.driveAxleModels.map((model) => (
                <option key={model.id} value={model.id}>
                  {model.name}
                </option>
              ))}
            </select>
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="drive_axle_serial">–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–µ–¥—É—â–µ–≥–æ –º–æ—Å—Ç–∞ *</label>
            <input
              type="text"
              id="drive_axle_serial"
              name="drive_axle_serial"
              value={formData.drive_axle_serial}
              onChange={handleChange}
              required
              className={styles.input}
            />
          </div>
        </div>

        <div className={styles.formRow}>
          <div className={styles.formGroup}>
            <label htmlFor="steer_axle_model">–ú–æ–¥–µ–ª—å —É–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ –º–æ—Å—Ç–∞ *</label>
            <select
              id="steer_axle_model"
              name="steer_axle_model"
              value={formData.steer_axle_model}
              onChange={handleChange}
              required
              className={styles.select}
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —É–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ –º–æ—Å—Ç–∞</option>
              {directories.steerAxleModels.map((model) => (
                <option key={model.id} value={model.id}>
                  {model.name}
                </option>
              ))}
            </select>
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="steer_axle_serial">–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä —É–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ –º–æ—Å—Ç–∞ *</label>
            <input
              type="text"
              id="steer_axle_serial"
              name="steer_axle_serial"
              value={formData.steer_axle_serial}
              onChange={handleChange}
              required
              className={styles.input}
            />
          </div>
        </div>

        <div className={styles.formGroup}>
          <label htmlFor="supply_contract">–î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏ ‚Ññ</label>
          <input
            type="text"
            id="supply_contract"
            name="supply_contract"
            value={formData.supply_contract}
            onChange={handleChange}
            className={styles.input}
          />
        </div>

        <div className={styles.formGroup}>
          <label htmlFor="consignee">–ì—Ä—É–∑–æ–ø–æ–ª—É—á–∞—Ç–µ–ª—å</label>
          <input
            type="text"
            id="consignee"
            name="consignee"
            value={formData.consignee}
            onChange={handleChange}
            className={styles.input}
          />
        </div>

        <div className={styles.formGroup}>
          <label htmlFor="delivery_address">–ê–¥—Ä–µ—Å –ø–æ—Å—Ç–∞–≤–∫–∏</label>
          <textarea
            id="delivery_address"
            name="delivery_address"
            value={formData.delivery_address}
            onChange={handleChange}
            rows={2}
            className={styles.textarea}
          />
        </div>

        <div className={styles.formGroup}>
          <label htmlFor="equipment">–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è (–¥–æ–ø. –æ–ø—Ü–∏–∏)</label>
          <textarea
            id="equipment"
            name="equipment"
            value={formData.equipment}
            onChange={handleChange}
            rows={2}
            className={styles.textarea}
          />
        </div>

        <div className={styles.formRow}>
          <div className={styles.formGroup}>
            <label htmlFor="client_name">–ö–ª–∏–µ–Ω—Ç</label>
            <input
              type="text"
              id="client_name"
              name="client_name"
              value={formData.client_name}
              onChange={handleChange}
              className={styles.input}
            />
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="service_company_name">–°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è</label>
            <input
              type="text"
              id="service_company_name"
              name="service_company_name"
              value={formData.service_company_name}
              onChange={handleChange}
              className={styles.input}
            />
          </div>
        </div>

        <div className={styles.formActions}>
          <button type="button" onClick={onClose} className={styles.cancelButton}>
            –û—Ç–º–µ–Ω–∞
          </button>
          <button type="submit" disabled={loading || directoriesLoading} className={styles.submitButton}>
            {loading ? "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..." : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"}
          </button>
        </div>
      </form>
    </FormModal>
  )
}

export default MachineForm
