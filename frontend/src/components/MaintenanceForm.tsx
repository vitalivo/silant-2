"use client"

import type React from "react"
import { useState, useEffect } from "react"
import { directoriesService, maintenanceService, machineService, type Maintenance } from "../services/api"
import { usePermissions } from "../hooks/usePermissions"
import FormModal from "./FormModal"
import AccessDenied from "./AccessDenied"
import styles from "../styles/Modal.module.css"

interface MaintenanceFormProps {
  isOpen: boolean
  onClose: () => void
  onSuccess: () => void
  maintenance?: Maintenance
  user?: any
}

const MaintenanceForm: React.FC<MaintenanceFormProps> = ({ isOpen, onClose, onSuccess, maintenance, user }) => {
  const [formData, setFormData] = useState({
    machine: "",
    maintenance_type: "",
    maintenance_date: "",
    operating_hours: "",
    work_order: "",
    work_order_date: "",
    work_order_number: "",
    maintenance_company: "",
    service_company: "",
  })

  const [directories, setDirectories] = useState({
    maintenanceTypes: [],
    serviceCompanies: [],
  })
  const [machines, setMachines] = useState([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [directoriesLoading, setDirectoriesLoading] = useState(false)

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
  const permissions = usePermissions(user)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
  const hasPermission = maintenance ? permissions.canEditMaintenance : permissions.canCreateMaintenance

  useEffect(() => {
    if (isOpen) {
      loadDirectories()
      loadMachines()
    }
  }, [isOpen])

  useEffect(() => {
    if (maintenance) {
      setFormData({
        machine: maintenance.machine?.toString() || "",
        maintenance_type: maintenance.maintenance_type?.id?.toString() || "",
        maintenance_date: maintenance.maintenance_date || "",
        operating_hours: maintenance.operating_hours?.toString() || "",
        work_order: maintenance.work_order || "",
        work_order_date: maintenance.work_order_date || "",
        work_order_number: maintenance.work_order_number || "",
        maintenance_company: maintenance.maintenance_company || "",
        service_company: maintenance.service_company?.id?.toString() || "",
      })
    } else {
      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¢–û
      setFormData({
        machine: "",
        maintenance_type: "",
        maintenance_date: "",
        operating_hours: "",
        work_order: "",
        work_order_date: "",
        work_order_number: "",
        maintenance_company: "",
        service_company: "",
      })
    }
  }, [maintenance])

  const loadDirectories = async () => {
    setDirectoriesLoading(true)
    try {
      console.log("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –¥–ª—è –¢–û...")
      const response = await directoriesService.getAllDirectories()
      console.log("üîç –û—Ç–≤–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:", response)

      const data = response.data || response
      console.log("üîç –î–∞–Ω–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:", data)

      setDirectories({
        maintenanceTypes: Array.isArray(data.maintenanceTypes) ? data.maintenanceTypes : [],
        serviceCompanies: Array.isArray(data.serviceCompanies) ? data.serviceCompanies : [],
      })
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:", err)
      setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
      setDirectories({
        maintenanceTypes: [],
        serviceCompanies: [],
      })
    } finally {
      setDirectoriesLoading(false)
    }
  }

  const loadMachines = async () => {
    try {
      console.log("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω...")
      const response = await machineService.getAll()
      const data = response.data
      const machinesArray = Array.isArray(data) ? data : data.results || []
      setMachines(machinesArray)
      console.log("üîç –ú–∞—à–∏–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", machinesArray.length)
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—à–∏–Ω:", err)
      setMachines([])
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!hasPermission) {
      setError("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
      return
    }

    setLoading(true)
    setError(null)

    try {
      console.log("üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –¢–û:", formData)

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const submitData = {
        ...formData,
        machine: Number.parseInt(formData.machine),
        maintenance_type: Number.parseInt(formData.maintenance_type),
        operating_hours: formData.operating_hours ? Number.parseInt(formData.operating_hours) : null,
        service_company: formData.service_company ? Number.parseInt(formData.service_company) : null,
      }

      if (maintenance) {
        await maintenanceService.update(maintenance.id, submitData)
      } else {
        await maintenanceService.create(submitData)
      }

      onSuccess()
      onClose()
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", err)
      if (err instanceof Error) {
        setError(err.message)
      } else {
        setError("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
      }
    } finally {
      setLoading(false)
    }
  }

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    })
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  if (!hasPermission) {
    return (
      <FormModal isOpen={isOpen} onClose={onClose} title="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞">
        <AccessDenied
          title={maintenance ? "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" : "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ"}
          message={
            maintenance
              ? "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –¢–û"
              : "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¢–û"
          }
          suggestion="–ö–ª–∏–µ–Ω—Ç—ã –∏ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏ –¢–û"
        />
      </FormModal>
    )
  }

  return (
    <FormModal isOpen={isOpen} onClose={onClose} title={maintenance ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¢–û" : "–î–æ–±–∞–≤–∏—Ç—å –¢–û"}>
      <form onSubmit={handleSubmit} className={styles.form}>
        {error && <div className={styles.error}>{error}</div>}

        {directoriesLoading && (
          <div style={{ padding: "10px", backgroundColor: "#fef3c7", borderRadius: "4px", marginBottom: "16px" }}>
            ‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...
          </div>
        )}

        <div className={styles.formRow}>
          <div className={styles.formGroup}>
            <label htmlFor="machine">–ú–∞—à–∏–Ω–∞ *</label>
            <select
              id="machine"
              name="machine"
              value={formData.machine}
              onChange={handleChange}
              required
              className={styles.select}
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É</option>
              {machines.map((machine) => (
                <option key={machine.id} value={machine.id}>
                  {machine.serial_number} ({machine.technique_model_name || "–ú–æ–¥–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞"})
                </option>
              ))}
            </select>
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="maintenance_type">–¢–∏–ø –¢–û *</label>
            <select
              id="maintenance_type"
              name="maintenance_type"
              value={formData.maintenance_type}
              onChange={handleChange}
              required
              className={styles.select}
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¢–û</option>
              {directories.maintenanceTypes.map((type) => (
                <option key={type.id} value={type.id}>
                  {type.name}
                </option>
              ))}
            </select>
          </div>
        </div>

        <div className={styles.formRow}>
          <div className={styles.formGroup}>
            <label htmlFor="maintenance_date">–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –¢–û *</label>
            <input
              type="date"
              id="maintenance_date"
              name="maintenance_date"
              value={formData.maintenance_date}
              onChange={handleChange}
              required
              className={styles.input}
            />
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="operating_hours">–ù–∞—Ä–∞–±–æ—Ç–∫–∞, –º/—á–∞—Å</label>
            <input
              type="number"
              id="operating_hours"
              name="operating_hours"
              value={formData.operating_hours}
              onChange={handleChange}
              className={styles.input}
              min="0"
            />
          </div>
        </div>

        <div className={styles.formRow}>
          <div className={styles.formGroup}>
            <label htmlFor="work_order">‚Ññ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–∞</label>
            <input
              type="text"
              id="work_order"
              name="work_order"
              value={formData.work_order}
              onChange={handleChange}
              className={styles.input}
            />
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="work_order_date">–î–∞—Ç–∞ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–∞</label>
            <input
              type="date"
              id="work_order_date"
              name="work_order_date"
              value={formData.work_order_date}
              onChange={handleChange}
              className={styles.input}
            />
          </div>
        </div>

        <div className={styles.formGroup}>
          <label htmlFor="work_order_number">–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–∞</label>
          <input
            type="text"
            id="work_order_number"
            name="work_order_number"
            value={formData.work_order_number}
            onChange={handleChange}
            className={styles.input}
          />
        </div>

        <div className={styles.formGroup}>
          <label htmlFor="maintenance_company">–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –ø—Ä–æ–≤–æ–¥–∏–≤—à–∞—è –¢–û</label>
          <input
            type="text"
            id="maintenance_company"
            name="maintenance_company"
            value={formData.maintenance_company}
            onChange={handleChange}
            className={styles.input}
          />
        </div>

        <div className={styles.formGroup}>
          <label htmlFor="service_company">–°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è</label>
          <select
            id="service_company"
            name="service_company"
            value={formData.service_company}
            onChange={handleChange}
            className={styles.select}
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é</option>
            {directories.serviceCompanies.map((company) => (
              <option key={company.id} value={company.id}>
                {company.name}
              </option>
            ))}
          </select>
        </div>

        <div className={styles.formActions}>
          <button type="button" onClick={onClose} className={styles.cancelButton}>
            –û—Ç–º–µ–Ω–∞
          </button>
          <button type="submit" disabled={loading || directoriesLoading} className={styles.submitButton}>
            {loading ? "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..." : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"}
          </button>
        </div>
      </form>
    </FormModal>
  )
}

export default MaintenanceForm
