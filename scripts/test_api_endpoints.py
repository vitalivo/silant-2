#!/usr/bin/env python
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints
"""
import requests
import json

def test_api_endpoints():
    print("üîå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINTS")
    print("=" * 50)
    
    base_url = "http://localhost:8000"
    
    # –°–ø–∏—Å–æ–∫ endpoints –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    endpoints = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        ("/api/machines/", "GET", "–°–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω"),
        ("/api/maintenance/", "GET", "–°–ø–∏—Å–æ–∫ –¢–û"),
        ("/api/complaints/", "GET", "–°–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–∞—Ü–∏–π"),
        
        # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        ("/api/technique-models/", "GET", "–ú–æ–¥–µ–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∏"),
        ("/api/engine-models/", "GET", "–ú–æ–¥–µ–ª–∏ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π"),
        ("/api/transmission-models/", "GET", "–ú–æ–¥–µ–ª–∏ —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–π"),
        ("/api/drive-axle-models/", "GET", "–ú–æ–¥–µ–ª–∏ –≤–µ–¥—É—â–∏—Ö –º–æ—Å—Ç–æ–≤"),
        ("/api/steer-axle-models/", "GET", "–ú–æ–¥–µ–ª–∏ —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –º–æ—Å—Ç–æ–≤"),
        ("/api/maintenance-types/", "GET", "–¢–∏–ø—ã –¢–û"),
        ("/api/failure-nodes/", "GET", "–£–∑–ª—ã –æ—Ç–∫–∞–∑–æ–≤"),
        ("/api/recovery-methods/", "GET", "–°–ø–æ—Å–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"),
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        ("/api/auth/user/", "GET", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"),
        ("/api/auth/csrf/", "GET", "CSRF —Ç–æ–∫–µ–Ω"),
        
        # –ü–æ–∏—Å–∫
        ("/api/machines/search_by_serial/?serial=17", "GET", "–ü–æ–∏—Å–∫ –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É"),
    ]
    
    session = requests.Session()
    
    for endpoint, method, description in endpoints:
        try:
            url = f"{base_url}{endpoint}"
            
            if method == "GET":
                response = session.get(url, timeout=10)
            elif method == "POST":
                response = session.post(url, timeout=10)
            else:
                continue
            
            # –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
            status_icon = "‚úÖ" if response.status_code == 200 else "‚ö†Ô∏è" if response.status_code in [401, 403] else "‚ùå"
            
            print(f"{status_icon} {description}")
            print(f"   URL: {endpoint}")
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    if isinstance(data, dict):
                        if 'results' in data:
                            print(f"   –ó–∞–ø–∏—Å–µ–π: {len(data['results'])}")
                        elif 'count' in data:
                            print(f"   –í—Å–µ–≥–æ: {data['count']}")
                        else:
                            print(f"   –ö–ª—é—á–∏: {list(data.keys())}")
                    elif isinstance(data, list):
                        print(f"   –ó–∞–ø–∏—Å–µ–π: {len(data)}")
                except:
                    print(f"   –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response.content)} –±–∞–π—Ç")
            elif response.status_code in [401, 403]:
                print("   (–¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)")
            else:
                print(f"   –û—à–∏–±–∫–∞: {response.text[:100]}")
            
            print()
            
        except requests.exceptions.ConnectionError:
            print(f"‚ùå {description}")
            print(f"   URL: {endpoint}")
            print("   –û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            print()
        except Exception as e:
            print(f"‚ùå {description}")
            print(f"   URL: {endpoint}")
            print(f"   –û—à–∏–±–∫–∞: {e}")
            print()
    
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_api_endpoints()
