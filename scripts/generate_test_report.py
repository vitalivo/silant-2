#!/usr/bin/env python
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
"""
import os
import django
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'silant_project.settings')
django.setup()

from django.apps import apps

def generate_report():
    print("üìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
    print("=" * 50)
    
    report = {
        "timestamp": datetime.now().isoformat(),
        "system_status": "OK",
        "models": {},
        "data": {},
        "issues": []
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
    try:
        Machine = apps.get_model('machines', 'Machine')
        Maintenance = apps.get_model('maintenance', 'Maintenance')
        Complaint = apps.get_model('complaints', 'Complaint')
        User = apps.get_model('accounts', 'User')
        
        report["models"] = {
            "Machine": {
                "fields_count": len(Machine._meta.get_fields()),
                "required_fields": 17,
                "status": "OK"
            },
            "Maintenance": {
                "fields_count": len(Maintenance._meta.get_fields()),
                "required_fields": 8,
                "status": "OK"
            },
            "Complaint": {
                "fields_count": len(Complaint._meta.get_fields()),
                "required_fields": 10,
                "status": "OK"
            }
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        report["data"] = {
            "machines": Machine.objects.count(),
            "maintenance": Maintenance.objects.count(),
            "complaints": Complaint.objects.count(),
            "users": User.objects.count()
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        orphaned_maintenance = Maintenance.objects.filter(machine__isnull=True).count()
        orphaned_complaints = Complaint.objects.filter(machine__isnull=True).count()
        
        if orphaned_maintenance > 0:
            report["issues"].append(f"–ù–∞–π–¥–µ–Ω–æ {orphaned_maintenance} –∑–∞–ø–∏—Å–µ–π –¢–û –±–µ–∑ –º–∞—à–∏–Ω—ã")
        
        if orphaned_complaints > 0:
            report["issues"].append(f"–ù–∞–π–¥–µ–Ω–æ {orphaned_complaints} —Ä–µ–∫–ª–∞–º–∞—Ü–∏–π –±–µ–∑ –º–∞—à–∏–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_without_role = User.objects.filter(role__isnull=True).exclude(is_superuser=True).count()
        if users_without_role > 0:
            report["issues"].append(f"–ù–∞–π–¥–µ–Ω–æ {users_without_role} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–æ–ª–∏")
        
    except Exception as e:
        report["system_status"] = "ERROR"
        report["issues"].append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report_file = f"test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    
    # –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    print(f"\nüìã –ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢:")
    print(f"–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {report['system_status']}")
    print(f"–ú–∞—à–∏–Ω—ã: {report['data'].get('machines', 0)}")
    print(f"–¢–û: {report['data'].get('maintenance', 0)}")
    print(f"–†–µ–∫–ª–∞–º–∞—Ü–∏–∏: {report['data'].get('complaints', 0)}")
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {report['data'].get('users', 0)}")
    
    if report["issues"]:
        print(f"\n‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
        for issue in report["issues"]:
            print(f"  - {issue}")
    else:
        print(f"\n‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

if __name__ == "__main__":
    generate_report()
